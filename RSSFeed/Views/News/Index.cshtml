@model IEnumerable<NewsItem>

<style>
    .news-container {
        display: flex;
        flex-wrap: wrap;
    }
    /* Ensure all cards have the same height */
    /* Ensure all cards have the same height */
    .card {
        height: 550px; /* Set the desired fixed height for the card */
    }

    /* Ensure all card bodies have the same height */
    .card-body {
        height: 100%; /* Take up the full height of the card */
        overflow: hidden; /* Hide overflowing content */
        display: flex;
        flex-direction: column;
    }
    .news-item {
        width: 33.33%; /* Three items per row */
        padding: 10px;
    }

    #showMoreButton {
        margin-top: 10px;
    }
</style>

<div class="container mt-4">
    <h2>News Feed</h2>

    <form method="post" asp-controller="News" asp-action="ClearAndSeedFromXml" id="parseForm">
        <button type="submit" class="btn btn-primary">Parse XML</button>
    </form>
    <div id="rssFeedItems" class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var item in Model)
        {
            <div class="news-item">
                <div class="card">
                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                    {
                        <img src="@item.ImageUrl" class="card-img-top" alt="Image Alt Text">
                    }

                    <div class="card-body">
                        <h5 class="card-title">@item.Title</h5>
                        <p class="card-text">@Html.Raw(item.Description)</p>
                    </div>

                    <div class="card-footer">
                        <a href="@item.Link" class="btn btn-primary" target="_blank">Read More</a>
                    </div>
                </div>
            </div>
        }
    </div>
    <div id="rssFeedItems" class="row row-cols-1 row-cols-md-4 g-4">
        <!-- Cards will be dynamically added here with JavaScript -->
    </div>
</div>


@* <script>
    
        // Mock data for testing (replace this with your actual data)
        var newsData = @Html.Raw(Json.Serialize(Model));

        // Function to create a card element
        function createCard(item) {
            var card = document.createElement('div');
            card.className = 'col';
            card.innerHTML = `
                    <div class="card h-100">
                        ${item.ImageUrl ? `<img src="${ImageUrl}" class="card-img-top" alt="Image Alt Text">` : ''}
                        <div class="card-body">
                            <h5 class="card-title">${item.Title}</h5>
                            <p class="card-text">${item.Description}</p>
                        </div>
                        <div class="card-footer">
                            <a href="${item.Link}" class="btn btn-primary" target="_blank">Read More</a>
                        </div>
                    </div>
                `;
            return card;
        }

        // Function to populate the cards
        function populateCards(data) {
            var rssFeedItems = document.getElementById('rssFeedItems');
            rssFeedItems.innerHTML = ''; // Clear existing content

            data.forEach(function (item) {
                var card = createCard(item);
                rssFeedItems.appendChild(card);
            });
        }

        // Populate cards with the provided data
        populateCards(newsData);
    
</script> *@
   
